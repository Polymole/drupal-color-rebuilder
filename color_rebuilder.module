<?php

/**
 * Implements hook_menu().
 */
function color_rebuilder_menu() {
  $items = array();

  $items['color_rebuilder/rebuild'] = array(
    'title' => 'myPage',
    'page callback' => 'color_rebuilder_rebuild',
    'page arguments' => array(),
    'access arguments' => array('access content'),
  );
  return $items;
}

function color_rebuilder_set_colors(&$form, $color_scheme) {

  // array of colors: $color_field_id => $hex_color
  $scheme_colors = $form['color']['info']['#value']['schemes'][$color_scheme]['colors'];

  // array of colors fields $color_field_id => $color_field_label
  $scheme_fields = $form['color']['info']['#value']['fields'];

  foreach ($scheme_fields as $key => $value) {
    $form['color']['palette'][$key]['#value'] = $scheme_colors[$key];
  }
}

function color_rebuilder_rebuild($theme_to_rebuild = 'oss_service_zen', $color_scheme = 'orange') {

  // Save error states and clear them.
  $errors_before = drupal_static('form_set_error', array());
  form_clear_error();

  // See if the css file is used the theme.
  $themes = list_themes();

  $submit_ran = FALSE;
  foreach ($themes as $theme_name => $theme_values) {

    // rebuild only specified theme color files
    if (!empty($theme_to_rebuild) && $theme_to_rebuild != $theme_name) {
      continue;
    }

    // Get the form for this theme.
    $router_item = menu_get_item('admin/appearance/settings/' . $theme_name);
    if ($router_item['include_file']) {
      require_once DRUPAL_ROOT . '/' . $router_item['include_file'];
    }
    $form = drupal_get_form('system_theme_settings', $theme_name);
    kpr($form);

    // Get the form defaults.
    $defaults = array();
    color_rebuilder_defaults_from_form($defaults, $form);
    color_rebuilder_set_colors($form, $color_scheme);
    kpr($form);


    // $rebuild = FALSE;
    // if (isset($defaults['atcore_version_test'])) {
    //   // Rebuild if the theme is an adaptive theme.
    //   $rebuild = TRUE;
    // }
    // if (!$rebuild && module_exists('color')) {
    //   foreach ($files_in_theme as $css_file) {
    //     if (isset($form['color'])) {
    //       // Rebuild if the file that was changed is a color module file.
    //       foreach ($defaults['info']['css'] as $theme_file) {
    //         if ($theme_path . '/' . $theme_file === $css_file) {
    //           $rebuild = TRUE;
    //           break 2;
    //         }
    //       }
    //     }
    //   }
    // }

    // // Skip if themes css does not need to be generated dynamically.
    // if (empty($rebuild)) {
    //   continue;
    // }

    // Build the palette value.
    $palette = array();
    if (isset($form['color'])) {
      foreach (element_children($form['color']['palette']) as $key) {
        $palette[$key] = $defaults[$key] = $form['color']['palette'][$key]['#value'];
      }
    }

    $defaults['scheme'] = $color_scheme;

    // Build the form state array.
    $form_state = array(
      'values' => array('palette' => $palette),
      'build_info' => array('args' => array(0 => $theme_name)),
    );
    $form_state['values'] += $defaults;

    if (isset($form['color'])) {
      // Validate form.
      kpr($form_state);
      color_scheme_form_validate($form, $form_state);
      $errors = form_set_error();
      if (empty($errors)) {
        // Only submit if no errors.
        color_scheme_form_submit($form, $form_state);
        $themes_done[$theme_name] = TRUE;
        $submit_ran = TRUE;
      }
    }
    // Reset form errors.
    form_clear_error();
  }
  // Save error states back.
  $form_set_error = &drupal_static('form_set_error', array());
  $form_set_error = $errors_before;
}

/**
 * Given a form get the default values from it.
 *
 * @param array $defaults
 *   An empty array used to populate the default values.
 * @param array $form
 *   The form returned from drupal_get_form().
 * @param string $parent_key
 *   The key name of the parent.
 */
function color_rebuilder_defaults_from_form(array &$defaults, array $form, $parent_key = '') {
  foreach (element_children($form) as $key) {
    $values = $form[$key];
    if (isset($values['#value'])) {
      // Grab defaults at this level.
      if (!isset($defaults[$key])) {
        $defaults[$key] = $values['#value'];
      }
      else {
        $defaults[$parent_key . '-' . $key] = $values['#value'];
      }
    }
    elseif (isset($values['#default_value'])) {
      // Grab defaults at this level.
      if (!isset($defaults[$key])) {
        $defaults[$key] = $values['#default_value'];
      }
      else {
        $defaults[$parent_key . '-' . $key] = $values['#default_value'];
      }
    }
    elseif (is_array($values)) {
      // Go deeper if needed.
      color_rebuilder_defaults_from_form($defaults, $values, $key);
    }
  }
}

function color_rebuilder_drush_color_rebuild($main_color = NULL) {
  $theme_to_rebuild = drush_get_option('theme', 1);
  $schema_color = drush_get_option('color', 1);
  color_rebuilder_rebuild($theme_to_rebuild, $schema_color);
}
